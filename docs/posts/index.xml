<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on watobi</title>
    <link>https://watobii.github.io/posts/</link>
    <description>Recent content in Posts on watobi</description>
    <image>
      <url>https://watobii.github.io/watobi.jpg</url>
      <link>https://watobii.github.io/watobi.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 13 Aug 2022 00:32:08 +0900</lastBuildDate><atom:link href="https://watobii.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>プライベートと仕事から考える私の人間性</title>
      <link>https://watobii.github.io/posts/humanity_private_work/</link>
      <pubDate>Sat, 13 Aug 2022 00:32:08 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/humanity_private_work/</guid>
      <description>なんというか、当たり前のことも書いてしまいましたので、その辺りはスルーいただければと思います🎈
まとまりの無い感じになってしまった感じもありますが、むしろまとまらないことが人間的だとも思います。分かりやすい人を目指すのでは無く、自分らしく、自分の意のままに生きていけたらいいなぁと思っています😎
大学までは三重の実家で暮らしていました。就職を気にどこか遠い所に行きたいと思い、全国展開している会社に入りました。札幌、東京福岡の配属希望を出したところ、東京配属となりました。自分自身、住む所にこだわりは多いですし、コンフォートゾーンに閉じこもる気もあるのですが、新しい場所で生活することへの好奇心が勝り、住む所🏠が転々としがちなところがあります。 結果、東京に2年、静岡に2年、愛知に1年＋、それ以外は三重で実家暮らし、という住まいの履歴になっています。 プライベートでは、家で過ごすことが多いです。外に出る趣味としては、温泉やサウナに行くのが好きです。それぞれの土地でお気に入りを見つけ、継続的に通っています。 プライベートでは、大人数があまり好きではありません。食事🥪をするにしても、4人くらいまでの方が安心します。リモートで会話をするのも、それぐらいまでの人数の方が好みです。 現在は自炊をすることが多いです。ただ、近くにコストパフォーマンスの良い飲食店があり、自分に一定以上の支払い能力がある状態であれば、自炊はほとんどしないと思います。自分の場合、自炊の捉え方が変わり、誰かと一緒に何かを作る体験が目的となっていく気がします。 職場での昼ごはんに手製の弁当を持参することが、半年以上続いています。週末に全て作って、容器に入れて冷凍しておくのがポイントです。一週間は完全に同じメニューですが、案外と飽きません。ご飯＋唐揚げ＋副菜で安定しています。 フットワークが軽く、仕事のクライアントから富士登山などに誘われるとホイホイついていってしまう性質があります。一緒に仕事をした人はクライアントも下請けも、所管庁も含め一緒にプロジェクトを推進した仲間だと思う傾向が強いです（これは場合によっては自制しないといけないと思っています）。 基本的に、他人にあまり迷惑をかけたくないと思っています。全人類幸せに生きれれば良いと思いますが、その中でも自分の周りの人間を強く優先します。距離が近い程、そういった傾向は強くなります。隣人の困りごとに自分の知識や経験が有効な場合、提供したいと思います。 仕事の場合、人と人の間に入ってコミュニケーションを取り、調整して、物事を前に進めることに、面倒くさいといった感情よりもむしろやり甲斐を覚え、ポジティブな感情を抱きます。自分が得意なことなのだと思います。 基本的に、合理的な物事が好きです。ただ、論理の飛躍やその説明を出来ない物事を切り捨てることは苦手です。場合によりますが、むしろすくい取りたくなります。 人と会うこと、話しをするのが好きです。お互いに言葉を紡いでコミュニケーションを取ることは、山登り🗻の様な面白さがあります（頂上は無い）。オフィスでの電話の声が大きくて、叱られたことがあります。 人の役に立つことが好きです。現職もそういったきっかけがあって入職しました。 プロフェッショナルな仕事に尊敬の念を抱きます。商業建築🏬での仕事は、関係者が非常に多いのが特徴です。新卒で入ったにも関わらず、ディレクター的立場での仕事でしたので、現場のプロの方にけちょんけちょんに言われる毎日でした。彼らは知識や経験があり、かつ素晴らしい仕事をするので、当然文句も言えません。それでも、出来るだけ自分で学び、分からないことは頭を下げ教えて貰うことで何とか乗り越えてきました。そういった仕事の場合は、できるだけ現場の方と同じ景色（おこがましいようであれば、せめて似たような景色🎞）を見れるように努めています。 自分自身がプロフェッショナルになれるかと言われると、難しさを覚えています。適正的にもゼネラリスト的方向を目指すべきかなぁと漫然と考えています。それでも、プロフェッショナルの仕事内容が全くわからないのでは話しになりませんし、自分自身も必ず悔しいと思います。プロフェッショナルな仕事に理解があり、一定の知識や経験がある、ゼネラリストになるのであればそんな人になりたいなぁと思います。 仕事の上では、口ばっかりで汗をかけない人が苦手です。これは何も物理的に体を動かして汗をかくことを意味しません。汗のかき方は人それぞれ、仕事それぞれにあると思います。 人は専門性のあること、もしくは好きなことを仕事にした方が合理的だよなと思っています。 物事を根本から考えるのが好きです。頭🧠は柔らかい（固定概念を認知する）方だと思います。 </description>
    </item>
    
    <item>
      <title>GitHubPagesの魅力を挙げていく（なぜブログサービスとして選択したか）</title>
      <link>https://watobii.github.io/posts/githubpages_charmpoint/</link>
      <pubDate>Wed, 10 Aug 2022 23:44:15 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/githubpages_charmpoint/</guid>
      <description>はじめに 本サイトはGitHubPages📄にて運用しております。 一般的なブログサービスは便利なものもたくさんあります。アカウントを登録すればすぐに開始できるし、機能も豊富で、至れり尽くせりです。 では、構築に手間がかかる（少なくともブログサービスよりは）GitHubPagesをなぜ選択したのかを、メリットを挙げながら振り返っていきたいと思います。
広告を載せる必要がない ブログサービスによっては、広告の表示が必須、もしくは広告の非表示が有料なところがあります。GitHubPagesに載る広告は自分でコントロールすることが出来るのが良いですね。
無料🆓 上記の広告の件が絡んできますが、ブログサービスによっては💰有料のプランが用意されている場合があります。逆に言うと、無料プランでは様々な規制が設定されています。アップロードできるデータサイズや、独自ドメインの利用の規制等が主だったところですね。GitHubにも有料プランが存在しますが、特定の機能に限られているので、無料プランでも十分な運用が可能です。
設計自由度が高い ブログサービスによっては、デザイン🎨が固定、もしくはほとんど固定されているところがあります。GitHubPagesは非常に設計自由度が高いです。これは反面、自分で何もかも用意する必要があるということでもあります。当然、本サイトのデザインテーマしかり、Hugoやjekyllという静的サイトジェネレーターしかり、様々な技術を利用させていただけます。しかし、英語の情報も多く、Git/GitHubの利用も必須なので、構築・運用ハードルが低いとは言えないと思います。
サービスの信頼性が高い GitHubはマイクロソフトが運営しており、倒産等によるサービスの停止リスクは低いと評価できます。また、GitHub、GitHubPagesの利用者は世界中におり、運営元にも信用がおけるので、利用者を無視するような形でのサービスに対する規制が行われるリスクも低いと考えています。運営側の考えが強く反映された結果、利用者目線とは異なるポリシーが敷かれてしまったブログサービスもあったります。
好きなことを書ける💖 ブログサービスによっては、ブログの内容を特定のジャンル（例えばIT技術）に制限するルールを敷いているところもあります。そこでは、個人的な日記やエッセイ的な内容を書くことはできなくなっています。そういった規制も、GitHubPagesならありません！
使ってみようかなと考えたブログサービス一覧 Qiita
はてなブログ
Zenn
おわりに 上記の内容より、私はGitHubPagesを選択しました。
当然ですが、GitHubPagesにデメリットが無いとは言いません。特に自由度の件はメリットとデメリットが表裏一体になっています。
また、特定のブログサービスにしか無いメリットもあったりします（つまりそれはGitHubPagesのデメリットとも言える）。SEOの強力さや、ネットブック📚の形式でコンテンツの販売ができるところもあります。ただ、このサイトは、少なくとも今のところマネタイズや発信力の高さみたいなところをあまり求めていなかったので、そのメリットとは合致しなかった感じですね。 ということで、今後も技術的な内容を中心にその他色々な内容を書いていけたらと思っています😁</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHubPagesを使用してブログ&amp;プロフィールサイトを表示するまでのError一覧など</title>
      <link>https://watobii.github.io/posts/githubpages_and_hugo/</link>
      <pubDate>Tue, 09 Aug 2022 17:04:49 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/githubpages_and_hugo/</guid>
      <description>なぜGitHubPagesを選んだのか 無料であり、広告がないのが魅力的でした。はてなブログやZennも検討しましたが、GitHubを使用した経験が乏しいので、練習も兼ねることが出来るのではと考えました。またGitHubを使い慣れておくとは、スキル💪として有用だとも考えていました。
※記事をMarkdownで書くことは必須事項でしたが、どのサイトもその要件は満たしていました。
静的サイトジェネレーターになぜHugoを選んだのか GitHubPagesを使用していく上で候補に挙がったのが、jekyllとHugoでした。jekyllはビルドに時間が遅い等の問題が見受けられました。調べるとjekyllからHugoに切り替えたというサイトもちらほらあり、かつ開発の継続性も見受けられましたので、Hugo（＋PaperMod）を選択しました。
※ただ、jekyllはGitHub推奨の静的サイトジェネレーターの様ですし、最初はそこから入っても良かったかもしれません。
参考にしたところ GitHub Pagesで作るウェブサイト開発入門 - 自分だけのホームページを無料で公開 Hugo+Github Pagesでプロフィールページを作ってみた 受難の日々（Error一覧）😥 configが従来生成されたconfig.tomlではなく、config.ymlを作る必要があった。これは選んだテーマにより違う部分の様なので、テーマの公式ドキュメントに書いてある内容だと思います。config.ymlの書き方もなかなか掴めず苦労しました。最終的には下記の公式ページにたどり着き、何とか事なきを得ました。
hugo-PaperMod installation sample config.yml hugo serverで生成したサイトがうまく表示できませんでした。http://localhost:1313/ にアクセスしても、Chromeが「このサイトにアクセスできません」と無情に表示するだけでした。しばらく生成された文章を眺めていると、hugo serverが実行されている間しかlocalのWebサーバーは有効にならない、と気付きました。生成が終わったから実行を止めないといけないと勘違いしており、生成する度にctrl+cで止めてからアクセスしちゃってました。そりゃ表示されないですよね。 Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Press Ctrl+C to stop!!
git cloneで取得したPaperModがhttp://localhost:1313/ の段階で動きませんでした。いくつか同様の事例を調べていると、git submoduleで導入している人が多かったので、実行してみたらうまくいきました（cloneしてきたフォルダは削除）。これは今のところ何が悪かったのか分かっていません。 上記の件と関連してURLやパスが異なるといったErrorが出ました（なぜかcloneで持ってきたフォルダは「PaperMod」、submoduleで持ってきたフォルダは「hugo-PaperMod」でした）。GitHub ActionsにこのURLやパスは存在しませんというErrorが出ており、気づきました。自分が誤った修正をしている場面もあり、なかなかErrorが治まりませんでした。 git initの実行したパスが自分の想定と異なっており、GitHub上に上がるのが上位階層のフォルダ１つのみという状況が続きました。GitHub ActionsからDocsフォルダが見つかりませんというError内容が出ており気づきました。結局は、正しい位置でGit initを実行し直した上でadd → commit → pushの一連の流れを行うとうまくいきました。まだGit、GitHubの操作に慣れておらず、随分と右往左往しました。 Repositoryの名前が不適切になっており、想定外のURLでGitHubPagesが公開されていました。それに伴い、baseurlが異なるのでサイト自体が全く表示されませんでした。Repositoryの名前を「github.</description>
    </item>
    
    <item>
      <title>IT初心者が『いちばんやさしいGit&amp;GitHubの教本 第2版』を読んで。</title>
      <link>https://watobii.github.io/posts/ichiyasagit_book_review/</link>
      <pubDate>Mon, 08 Aug 2022 21:30:37 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/ichiyasagit_book_review/</guid>
      <description>TL;DR 総じて良い書籍📘だと感じました。書籍内の演習は全て実践させていただきました。
自分の状況。 GitはInstallしていたが、使用実績はなかった。 GitHubのaccountは持っていたが使用できていなかった。 Visual Studio Codeはinstallしてあり、使用実績もあった。 拡張子やDirectory構造📁をある程度理解していた。 CLIには慣れていた。 htmlを編集したことがあった。 以上のような状況なので、PCの扱いを含めて何も分かっていないわけではありませんでした。ただ、上記のような経験が無くとも実践していけるように作ってあると思います。尚、IT関連の実務経験はありません。 良かったところ。 Git＆GitHubを学ぶ上で、良い書籍だと感じました。Teamを想定した開発の演習があるのですが、その内容も分かりやすく興味を持って取り組み続けることができました。 command lineで実施するところと、その結果がしっかりと表示してあり、勘違いをしにくい（自分がCommand Lineを打ち込む場面なのか実行結果を待つ場面なのかといった）のも進めやすかったです。
事前説明の項目と演習の項目がしっかりと分けられており、分かりやすかったです。反面、少し上長にも感じました（事前説明の段階で先んじて実行してしまったり等）。「いちばんやさしい」をタイトルにしている以上は仕方ないのかなぁとも思います。 ところどころにある「ワンポイント」で納得感を得ました。編纂事情の説明や、こんなこともできるよといった演習では扱いきれない、視座に富んだ内容が記載されていました。master/slaveがmainに変わりつつある話しとか、面白かったです。下記画像はP140。 公開鍵による認証手続き（今回はSSH）についても、丁寧に解説してあったと思います。こういった書籍を用いずに実践する場合は、躓きポイントになりそうですね。 自分が詰まったところ。 Pull Request先を誤ってfork元にしてしまいました（yasagit-2/ichiyasaGitSample Repository）。同じことをしてしまっている人も多くいるようで、私が訪問した時点で同様のRepositoryには41件（forkは300件超）のPull Requestが行われていました。書籍の読者の皆様、同じ間違いをするようで少し安心しましたｗ
（Pull Requestは取り消すこともできるので、間違った方はそうすると良いかもしれません） ホームディレクトリの環境変数を変更するのに手間取りました。/c/Users/(Home Directory)にはすでにいくつかのFolderやFileが存在したので、そこに新たにFolderを作成し、その直下で作業を進めたいと考えました。しかし、SSH Keyを生成する際に自動的に指定されるのがHome Directoryだったので、その変更を余儀なくされました。結果、Git Bash上でSETXCommandを実行して、変更することができました。下記を参考にしました。操作自体は簡単だったのですが、Git Bashの再起動を実施していなかったので、結果が反映されていないことに気づくのに時間がかかりました。GUIで実施すれば問題なく、かつ早くできたと思いますが、CLIで操作したかったんです。。。
[Git] Git Bashのホームディレクトリを変更する
SETXで環境変数の変更を間違えた場合に面倒なことがあるようですが、最終的にはPowerShellを用いて解決できるようでした。
Windows環境変数の設定に「SETX」コマンドを使ってはいけない理由 Repositoryの連携に手間取りました。上記の件でGit Bashを再起動したせいか、Remote Repository（GitHub）との連携が解消されており、Commitしたところ、下記の通知が流れました。ここでemailだけでも判別できるかなぁ、とか色々やって時間を食いました。 誤植らしきところ。 下記の画像のところです。行数の順番がおかしくなっており（114から始まり途中で90になっている）、記載に誤りがあると思われます。この内容はインプレス社のお詫びと訂正に載っていませんでした（2022年8月7日訪問時）。P215です。
いちやさGit インプレス社 まだ慣れないところ。 git init → git add → git commit git clone → git branch → git add → git commit → git push → Create Pull Request → Review → Merge → git pull git status, git diff, git checkout, git reset, git rm, git log, git remote</description>
    </item>
    
  </channel>
</rss>
