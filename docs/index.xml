<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>watobi&#39;s page</title>
    <link>https://watobii.github.io/</link>
    <description>Recent content on watobi&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 19 Aug 2022 22:18:17 +0900</lastBuildDate><atom:link href="https://watobii.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter Challenge!💥 練習編（更新中）</title>
      <link>https://watobii.github.io/posts/flutter_practice_record/</link>
      <pubDate>Fri, 19 Aug 2022 22:18:17 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/flutter_practice_record/</guid>
      <description>Day1 開発機の選定。 マウス・キーボードの設定。 Homebrewのインストール。 AndroidStudioのインストール。 Gitのインストール。 ローカル＆リモートリポジトリの設定。 Day2 画像と文字を画面に表示するアプリを作成（写経＋アレンジ）。 assets/を作成して画像をコピーしてくる。ymlを書き換えて画像ファイルを認識させる。 Image()で画像を表示。 Text()で文字を表示。 body: Centor()（全体配置）、Column()（縦配置）、Row()（横配置）でレイアウト。 MainAxisAlignment.で配置パターンを設定。 child: []とchildren: []で入れ子構造の設定。
リポジトリ：flutter_practice_display Day3 名前と日付を入力することで、生まれてから現在までの日数を計算するアプリを作成（写経＋アレンジ）。 appbar:で画面上端のバー＋テキストを表示。 StringとDateTimeの型で変数生成。 InputDecoration()でテキスト入力欄のデザイン設定。 print()でconsoleに値を出力。デバッグでも有効。 Icon:でアイコンを表示。 Padding()で4方向のレイアウト調整。 SingleChildScrollView()画面内に治まらない時のスクロールに対応。 if文でnull回避。hoge!にてnullで無いことの証明。 TextField()やShowDatePicker()を使用して入力パターンを設定。 onPressed:を使用してタップ動作の検知。 aysncとawaitを使用して動作に時間差があるデータの格納に対応（カレンダーを表示する→日付を選択する）。 新たなclassを作成。 lib/に.dartファイルを追加して、新たな画面を作成。 Navigator.push()とMaterialPageRoute(builder: (context) =&amp;gt;)を使用してmain.dartから画面遷移。
リポジトリ：flutter_practice_calc Day4・5・6・7 本記事の初回作成。 プロフィールを表示して、シェアするアプリを作成中。 url_launcherパッケージのインストールと適用。 launchURLでメールアプリの自動起動と適用するテキストを設定。 Future&amp;lt;void&amp;gt;、async、awaitで時間がかかる処理の対応。 if + throwで例外処理。 継続中の問題 バーチャルiPhone機との接続ができず、アプリが立ち上げられない。Andoroid機は問題無し。 時間の確保が困難😥　少しずつでも、出来るだけ毎日進めていきたい。 </description>
    </item>
    
    <item>
      <title>Mac(M1/Apple silicon)でGit&amp;Githubを使用したローカル&amp;リモートリポジトリを作成する方法覚え書き。</title>
      <link>https://watobii.github.io/posts/build_git_github_enviroment/</link>
      <pubDate>Tue, 16 Aug 2022 20:09:40 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/build_git_github_enviroment/</guid>
      <description>読み飛ばしてOKのまえがき 現在、私はFlutterでアプリ開発にチャレンジしています📱
その開発内容もgit＆githubで管理していきたいなと思いました。アプリ開発をしているのは、iPhoneの実験もしたいことから、Mac機を使用しています。環境構築済みのWindows機ではないので、新たに環境構築が必要となります。 一度、Git＆Githubの本で一通り実施したので、それ程詰まらずに進めることができるだろうと思っていたのですが、思ったより時間を要してしまいました。 今後も新たなPCでGit＆Githubの環境構築をすることがあると思いますので、その方法をまとめておきたいと思います。
注意事項？ 全てCLI前提（Mac標準搭載のターミナル）で書いていきます。M1💻と記載しましたが、Apple silicon系であれば内容は同じと思われます。また、Windowsでも、パッケージマネージャー入れたり（必須ではない）、コマンド実行したり、流れや内容は概ね一緒かと思います。
実行手順 Homebrew🍺をHPにアクセスしてインストールする。PATHが追加されていない場合（インストール時にwarningが出る）、Users/ユーザー名/に.zshrcを作成する。.zshrcにexport PATH=/opt/homebrew/bin:$PATHを追記する。下記を実行して、追記内容を反映させる。
※インストールしただけではPATHが登録されないのはM1の仕様みたい。
※Homebrewインストールの参考ページ →Homebrewのインストール source .zshrc 下記を実行してバージョン情報が確認できれば問題なし。 brew -v 下記でパスの設定状況を確認するのも良い。 echo $PATH gitをインストールし、ユーザー名とパスワードを登録する（Githubと合わせる必要は特段無い）。下記を実行。 brew install git git confg -- global user.name ユーザー名 git confg -- global user.email メールアドレス 下記を実行すると、設定した内容を確認できる。特に問題なければOK。 git config --list Githubをリモートリポジトリに設定する為に、SSH Keyを設定する。任意のフォルダ（ユーザー名/など）で下記を実行して秘密鍵/公開鍵を作成する。-c &amp;quot;内容&amp;quot;を追記して実行すると、鍵にコメントが追記できる。コメントとしてメールアドレスを追記する作法があったようだが、特段必要は無いと思われる。-f &amp;quot;内容&amp;quot;を追記して実行すると鍵のファイル名を設定できるが、これも必須では無い。ファイル名を設定した場合は.sshフォルダ configファイルを作成してファイル名等を記載する必要がある。 ※ed25519は暗号化の種類。 ssh-keygen -t ed25519 鍵の置き場所を聞いてくるので、カレントディレクトリで問題無ければそのままENTERを押す。設定するパスフレーズを2回入力する。
※パスフレーズはパスワードの対応文字数が多いバージョン。また、文字にスペースを設定可能。尚、フレーズ=単語を入力しろということではない。
ディレクトリ内にid_ed25519（秘密鍵）とid_ed25519.pub（公開鍵）が作成されていればOK。公開鍵の内容をコピーするために下記を実行する。Finderで直接開いて、内容をコピーしても同じ。 pbcopy &amp;lt; id_ed25519.pub GitHubにアクセスして、Settings→SSH and GPG keys→New SSH keyをクリック。TitleにはPCの種類等を記載して、Keyには公開鍵の内容をペーストする。Add SSH keyをクリックして、Github上の鍵の設定は完了。下記を実行する。 ssh -T git@github.com 実行の可否を聞いてくるので、yesと入力。Hi~と出てくればSSH keyの設定はOK。 Github上でリモートリポジトリを作成する。作成したリポジトリのSSH用URL（NOT https）をコピーしておく。 リモートリポジトリとローカルリポジトリを接続する。下記を実行。 git remote add origin ローカルリポジトリを作成したいディレクトリを移動する。下記を実行しローカルリポジトリを作成する。 git init Gitでadd→commit→pushを実行し、ローカルリポジトリの内容をリモートリポジトリに反映させる。下記を実行して、Gitのインデックスに登録（Git管理の対象になる）。 git add .</description>
    </item>
    
    <item>
      <title>Flutter Challenge!💥</title>
      <link>https://watobii.github.io/posts/flutter_challenge/</link>
      <pubDate>Sun, 14 Aug 2022 00:33:59 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/flutter_challenge/</guid>
      <description>Dart+Flutterを使用したAndroid、iPhoneのアプリ開発にチャレンジしてみようと思います。
Flutterをおさらい FlutterはWindows、MacOS、Linux、iPhone、Android、向けにアプリケーションを開発できるSDK（Software Development Kit・ソフトウェア開発キット）です。特に近年スマートフォンアプリの開発で注目されています。通常、スマートフォンのネイティブアプリの開発では、AndroidではKotlin+Android Studioが、iPhoneではSwift+Xcodeをが使用されると思います。しかし、Dart＋FlutterではどちらのスマートフォンOSにも対応した開発をすることができます。DartはFlutterで使用される言語ですね。
クロスプラットフォーム開発への憧れ Java+Android StudioでAndroidアプリの教本に載っているアプリを写経＋アレンジしたことがありますが、それだけでもやることが多く、それなりに大変だった記憶があります。しかも、当たり前ですが、Androidでしか動作しません。それが、共通のソースコードでAndroid、iPhoneのどちらにも対応できるなんて、何てお得💴なんだと思いました。お得なものは、みんな使用したくなりますよね！
それぞれの機器それぞれが持つ値のI/Oなど、仕様が異なる部分が盛りだくさんだと思うのですが、その辺りをどのように解決していくのか、楽しみでもあります。今のところ、センサーの値の引っ張ってきて何かをする予定はありませんが。
新しいものへの興味 Dartは2011年、Flutterは2017年に開発されたもので、比較的新しい開発手法です。何事もそうですが、新しいものに興味をソソられます。従来のものとはどのように差があるのか、どんな問題を解決していて、逆にどんな弱点があるのか、完全な上位互換なのか等が気になるタイプです。また、新しいということは、触れている人が少ないということでもあります。それは自分の個性の取得に繋がるかもしれませんし、まだ多くの人が見ていない景色を見ることが出来るかもしれません。未開の地🌏って、ワクワクしますよね。無人島だけが冒険じゃないんだぜ！
尚、体系化された日本語リファレンスが圧倒的に少ないとうデメリットもあります。英語の公式ドキュメントを何とか読み解くか、数少ない日本語の参考資料を自分なりに繋げていく作業が必要になりそうです。
スマートフォンアプリ開発の実績の解除🎮 これから就職活動を行っていく上で、何が必要なのか、求人を見ながら考えました。条件等が合致しそうな企業の中に、スマートフォンのアプリ開発経験が必要なところがありましたので、その実績解除が出来れば良いと考えました。しかも、言葉の捉えようによってはAndroid、iPhoneのどちらのアプリも開発した実績を得ることが出来るので、お得だなという思いもありました（本当に捉え方次第ですが😂）。
スマートフォンというデバイスの面白み📱 パソコンやスマートフォン、VRゴーグルやグラス、時計や指輪等、色々なIT機器が出ています。その中でも、人の生活に溶け込んだデバイスをプラットフォームとした開発は、面白いのではと思っています。人がそのデバイスを頼りにする機会も多く、また直感的な操作感覚やその体験を、より直に感じやすいのではと思っています。UI/UXの凝り甲斐がありますね（挫折フラグ🚩）。 また、スマートフォンは圧倒的に普及しているデバイスなので、その広がりの大きさも魅力的だと思いました。作ったアプリケーションを、ITやその機器に詳しくないような、自分の身近な人に使って貰える可能性があるって、ステキじゃないですか！
尚、挫折する可能性もありまして。。。 色々書きましたが、まずは最低限の機能で作っていくと思います。挫折が一番怖いですからね。 暖かく見守っていただき、挫折したなと見受けられる時はGitHubにスター🌟ください！　リリースできた時は倍スター🌟ください！</description>
    </item>
    
    <item>
      <title>プライベートと仕事から考える私の人間性</title>
      <link>https://watobii.github.io/fixed/humanity_private_work/</link>
      <pubDate>Sat, 13 Aug 2022 00:32:08 +0900</pubDate>
      
      <guid>https://watobii.github.io/fixed/humanity_private_work/</guid>
      <description>まとまりの無い感じになってしまった感じもありますが、むしろまとまらないことが人間的だとも思います。分かりやすい人やその形を目指すのでは無く、自分らしく、自分の意のままに生きていけたらいいなぁと思っています😎
大学までは三重の実家で暮らしていました。就職を気にどこか遠い所に行きたいと思い、全国展開している会社に入りました。札幌、東京福岡の配属希望を出したところ、東京配属となりました。自分自身、住む所にこだわりは多いですし、コンフォートゾーンに閉じこもる気もあるのですが、新しい場所で生活することへの好奇心が勝り、住む所🏠が転々としがちなところがあります。 結果、東京に2年、静岡に2年、愛知に1年＋、それ以外は三重で実家暮らし、という住まいの履歴になっています。 プライベートでは、家で過ごすことが多いです。外に出る趣味としては、温泉やサウナに行くのが好きです。それぞれの土地でお気に入りを見つけ、継続的に通っています。 プライベートでは、大人数があまり好きではありません。食事🥪をするにしても、4人くらいまでの方が安心します。リモートで会話をするのも、それぐらいまでの人数の方が好みです。 現在は自炊をすることが多いです。ただ、近くにコストパフォーマンスの良い飲食店があり、自分に一定以上の支払い能力がある状態であれば、自炊はほとんどしないと思います。自分の場合、自炊の捉え方が変化し、誰かと一緒に料理を作るとう体験そのものが目的となっていく気がします。 職場での昼ごはんに手製の弁当を持参することが、半年以上続いています。週末に全て作って、容器に入れて冷凍しておくのがポイントです。一週間は完全に同じメニューですが、案外と飽きません。ご飯＋唐揚げ＋副菜で安定しています。 勤務に時間がかかるのが苦手です。できる限り、会社の近くに住んで移動時間を短縮したいと思っています。仕事に慣れてきたら、可能ならテレワークもしてみたいと思っています。 現在は愛知県中でもそれなりに田舎の方に住んでいますが、自動車🚗を所持していません。場所によっては必要ないものだと思っているからです。例えば、私が住んできた東京（品川区）や静岡（静岡市）では、それほど必要性を感じませんでした。愛知県でも、名古屋市内なら、必要性はそれほど高くないでしょう。自分は決められた勤務先から近いという理由で住む場所を選択しています。つまり、勤務先が名古屋付近となれば、自動車を持つ必要性が薄いのです。上が決めた勤務先によって、自分が自動車を準備する、購入する必要がある（あるいは必要無くなる）という状況が嫌なんです。支配に対するレジスタンスといった感じでしょうか。かなり不便ではありますが、何とか自転車や徒歩で生活しています。 フットワークが軽く、仕事のクライアントから富士登山などに誘われるとホイホイついていってしまう性質があります。一緒に仕事をした人はクライアントも下請けも、所管庁も含め一緒にプロジェクトを推進した仲間だと思う傾向が強いです（これは場合によっては自制しないといけないと思っています）。 基本的に、他人にあまり迷惑をかけたくないと思っています。全人類幸せに生きれれば良いと思いますが、その中でも自分の周りの人間を強く優先します。距離が近い程、そういった傾向は強くなります。隣人の困りごとに自分の知識や経験が有効な場合、提供したいと思います。 仕事の場合、人と人の間に入ってコミュニケーションを取り、調整して、物事を前に進めることに、面倒くさいといった感情よりもむしろやり甲斐を覚え、ポジティブな感情を抱きます。自分が得意なことなのだと思います。 基本的に、合理的な物事が好きです。ただ、論理の飛躍やその説明を出来ない物事を切り捨てることは苦手です。場合によりますが、むしろすくい取りたくなります。 人と会うこと、話しをするのが好きです。お互いに言葉を紡いでコミュニケーションを取ることは、山登り🗻の様な面白さがあると思っています（頂上は無い）。オフィスでの電話の声が大きくて、叱られたことがあります。 人の役に立つことが好きです。現職もそういったきっかけがあって入職しました。 プロフェッショナルな仕事に尊敬の念を抱きます。商業建築🏬での仕事は、関係者が非常に多いのが特徴です。新卒で入ったにも関わらず、ディレクター的立場での仕事でしたので、現場のプロの方にけちょんけちょんに言われる毎日でした。彼らは知識や経験があり、かつ素晴らしい仕事をするので、当然文句も言えません。それでも、出来るだけ自分で学び、分からないことは頭を下げ教えて貰うことで何とか乗り越えてきました。そういった仕事の場合は、できるだけ現場の方と同じ景色（おこがましいようであれば、せめて似たような景色🎞）を見れるように努めています。 自分自身がプロフェッショナルになれるかと言われると、難しさを覚えています。適正的にもゼネラリスト的方向を目指すべきかなぁと漫然と考えています。それでも、プロフェッショナルの仕事内容が全くわからないのでは話しになりませんし、自分自身も悔しいと必ず思います。プロフェッショナルな仕事に理解があり、一定の知識や経験がある、ゼネラリストになるのであればそんな人になりたいなぁと思います。 仕事の上では、口ばっかりで汗をかけない人が苦手です。これは何も物理的に体を動かして汗をかくことを意味しません。汗のかき方は人それぞれ、仕事それぞれにあると思います。 人は専門性のあること、もしくは好きなことを仕事にした方が合理的だよなと思っています。 物事を根本から考えるのが好きです。頭🧠は柔らかい（固定概念を認知する）方だと思います。ミクロとマクロ、どちらの視点も大切にしながら適切に行き来をしていきたいです。 </description>
    </item>
    
    <item>
      <title>GitHubPagesの魅力を挙げていく（なぜブログサービスとして選択したか）</title>
      <link>https://watobii.github.io/posts/githubpages_charmpoint/</link>
      <pubDate>Wed, 10 Aug 2022 23:44:15 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/githubpages_charmpoint/</guid>
      <description>はじめに 本サイトはGitHubPages📄にて運用しております。 一般的なブログサービスは便利なものもたくさんあります。アカウントを登録すればすぐに開始できるし、機能も豊富で、至れり尽くせりです。 では、構築に手間がかかる（少なくともブログサービスよりは）GitHubPagesをなぜ選択したのかを、メリットを挙げながら振り返っていきたいと思います。
広告を載せる必要がない ブログサービスによっては、広告の表示が必須、もしくは広告の非表示が有料なところがあります。GitHubPagesに載る広告は自分でコントロールすることが出来るのが良いですね。
無料🆓 上記の広告の件が絡んできますが、ブログサービスによっては💰有料のプランが用意されている場合があります。逆に言うと、無料プランでは様々な規制が設定されています。アップロードできるデータサイズや、独自ドメインの利用の規制等が主だったところですね。GitHubにも有料プランが存在しますが、特定の機能に限られているので、無料プランでも十分な運用が可能です。
設計自由度が高い ブログサービスによっては、デザイン🎨が固定、もしくはほとんど固定されているところがあります。GitHubPagesは非常に設計自由度が高いです。これは反面、自分で何もかも用意する必要があるということでもあります。当然、本サイトのデザインテーマしかり、Hugoやjekyllという静的サイトジェネレーターしかり、様々な技術を利用させていただけます。しかし、英語の情報も多く、Git/GitHubの利用も必須なので、構築・運用ハードルが低いとは言えないと思います。
サービスの信頼性が高い GitHubはマイクロソフトが運営しており、倒産等によるサービスの停止リスクは低いと評価できます。また、GitHub、GitHubPagesの利用者は世界中におり、運営元にも信用がおけるので、利用者を無視するような形でのサービスに対する規制が行われるリスクも低いと考えています。運営側の考えが強く反映された結果、利用者目線とは異なるポリシーが敷かれてしまったブログサービスもあったります。
好きなことを書ける💖 ブログサービスによっては、ブログの内容を特定のジャンル（例えばIT技術）に制限するルールを敷いているところもあります。そこでは、個人的な日記やエッセイ的な内容を書くことはできなくなっています。そういった規制も、GitHubPagesならありません！
使ってみようかなと考えたブログサービス一覧 Qiita
はてなブログ
Zenn
おわりに 上記の内容より、私はGitHubPagesを選択しました。
当然ですが、GitHubPagesにデメリットが無いとは言いません。特に自由度の件はメリットとデメリットが表裏一体になっています。
また、特定のブログサービスにしか無いメリットもあったりします（つまりそれはGitHubPagesのデメリットとも言える）。SEOの強力さや、ネットブック📚の形式でコンテンツの販売ができるところもあります。ただ、このサイトは、少なくとも今のところマネタイズや発信力の高さみたいなところをあまり求めていなかったので、そのメリットとは合致しなかった感じですね。 ということで、今後も技術的な内容を中心にその他色々な内容を書いていけたらと思っています😁</description>
    </item>
    
    <item>
      <title>プロフィールなど</title>
      <link>https://watobii.github.io/fixed/profile/</link>
      <pubDate>Tue, 09 Aug 2022 19:34:49 +0900</pubDate>
      
      <guid>https://watobii.github.io/fixed/profile/</guid>
      <description>ITエンジニアになりたいとなぁと考えている者です😎
今は愛知で地方公務員をやっています。
ITに関連する実務経験はありませんが、学びながら挑戦していきたいと思っています！
📘資格は基本情報技術者試験、応用情報技術者試験を持っています。
もしも気になるなぁと思ってくださる方がいらっしゃれば、下記メールフォームよりご連絡いただけると幸いです。 TwitterのDMからも歓迎です。
連絡先（Google Forms）
経歴 大学。卒業設計が優秀作品となり、大学代表として日本建築学会支部協会の全国大学・高専卒業設計展示会で全国を巡回しました。また、卒業時に学園賞をいただきました。 大学卒業後、🏬商業建築を手掛ける会社に入社しました。商業施設に入る複数テナントを建築設計・施工の面で総合的に監理・監督する仕事をしていました（約4年）。 職業訓練校にて💻情報系の勉強や課題に取り組みました（2年）。 地方公務員として🏫教育系の仕事をしています。人の前に立って授業をするのが仕事の半分くらいです（1年+継続中）。 現在の仕事は大きなストレスも無く、一定程度充実し、安定もしています。ただ、エンジニア職への、開発への好奇心が抑えられず、転職を考えている次第です🔥
人間性 長くなりましたので、以下のリンクにまとめました。
プライベートと仕事から考える私の人間性
スキル 前述の通り実務経験はありません。使ったことがあるものを書きます。
言語 C, C++, C#, Java, VBA
データベース Microsoft SQL Server, Access
サーバー BIND, Apache, ArGoMail, IIS（Microsoft Internet Information Services）
ライブラリ・フレームワーク .NET Framework, ASP.NET
開発環境 .NET, AndroidStudio, VisualStudio, Eclipse, IAR EW（Embedded Workbench for Arm）
アプリケーション Git, GitHub, WireShark, Thunderbird, SSMS(Microsoft SQL Server Management Studio), FFFTP
Linux command line, shell script, ssh</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHubPagesを使用してブログ&amp;プロフィールサイトを表示するまでのError一覧など</title>
      <link>https://watobii.github.io/posts/githubpages_and_hugo/</link>
      <pubDate>Tue, 09 Aug 2022 17:04:49 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/githubpages_and_hugo/</guid>
      <description>なぜGitHubPagesを選んだのか 無料であり、広告がないのが魅力的でした。はてなブログやZennも検討しましたが、GitHubを使用した経験が乏しいので、練習も兼ねることが出来るのではと考えました。またGitHubを使い慣れておくとは、スキル💪として有用だとも考えていました。
※記事をMarkdownで書くことは必須事項でしたが、どのサイトもその要件は満たしていました。
静的サイトジェネレーターになぜHugoを選んだのか GitHubPagesを使用していく上で候補に挙がったのが、jekyllとHugoでした。jekyllはビルドに時間が遅い等の問題が見受けられました。調べるとjekyllからHugoに切り替えたというサイトもちらほらあり、かつ開発の継続性も見受けられましたので、Hugo（＋PaperMod）を選択しました。
※ただ、jekyllはGitHub推奨の静的サイトジェネレーターの様ですし、最初はそこから入っても良かったかもしれません。
参考にしたところ GitHub Pagesで作るウェブサイト開発入門 - 自分だけのホームページを無料で公開 Hugo+Github Pagesでプロフィールページを作ってみた 受難の日々（Error一覧）😥 configが従来生成されたconfig.tomlではなく、config.ymlを作る必要があった。これは選んだテーマにより違う部分の様なので、テーマの公式ドキュメントに書いてある内容だと思います。config.ymlの書き方もなかなか掴めず苦労しました。最終的には下記の公式ページにたどり着き、何とか事なきを得ました。
hugo-PaperMod installation sample config.yml hugo serverで生成したサイトがうまく表示できませんでした。http://localhost:1313/ にアクセスしても、Chromeが「このサイトにアクセスできません」と無情に表示するだけでした。しばらく生成された文章を眺めていると、hugo serverが実行されている間しかlocalのWebサーバーは有効にならない、と気付きました。生成が終わったから実行を止めないといけないと勘違いしており、生成する度にctrl+cで止めてからアクセスしちゃってました。そりゃ表示されないですよね。 Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Press Ctrl+C to stop!! git cloneで取得したPaperModがhttp://localhost:1313/ の段階で動きませんでした。いくつか同様の事例を調べていると、git submoduleで導入している人が多かったので、実行してみたらうまくいきました（cloneしてきたフォルダは削除）。これは今のところ何が悪かったのか分かっていません。 上記の件と関連してURLやパスが異なるといったErrorが出ました（なぜかcloneで持ってきたフォルダは「PaperMod」、submoduleで持ってきたフォルダは「hugo-PaperMod」でした）。GitHub ActionsにこのURLやパスは存在しませんというErrorが出ており、気づきました。自分が誤った修正をしている場面もあり、なかなかErrorが治まりませんでした。 git initの実行したパスが自分の想定と異なっており、GitHub上に上がるのが上位階層のフォルダ１つのみという状況が続きました。GitHub ActionsからDocsフォルダが見つかりませんというError内容が出ており気づきました。結局は、正しい位置でGit initを実行し直した上でadd → commit → pushの一連の流れを行うとうまくいきました。まだGit、GitHubの操作に慣れておらず、随分と右往左往しました。 Repositoryの名前が不適切になっており、想定外のURLでGitHubPagesが公開されていました。それに伴い、baseurlが異なるのでサイト自体が全く表示されませんでした。Repositoryの名前を「github.</description>
    </item>
    
    <item>
      <title>IT初心者が『いちばんやさしいGit&amp;GitHubの教本 第2版』を読んで。</title>
      <link>https://watobii.github.io/posts/ichiyasagit_book_review/</link>
      <pubDate>Mon, 08 Aug 2022 21:30:37 +0900</pubDate>
      
      <guid>https://watobii.github.io/posts/ichiyasagit_book_review/</guid>
      <description>TL;DR 総じて良い書籍📘だと感じました。書籍内の演習は全て実践させていただきました。
自分の状況。 GitはInstallしていたが、使用実績はなかった。 GitHubのaccountは持っていたが使用できていなかった。 Visual Studio Codeはinstallしてあり、使用実績もあった。 拡張子やDirectory構造📁をある程度理解していた。 CLIには慣れていた。 htmlを編集したことがあった。 以上のような状況なので、PCの扱いを含めて何も分かっていないわけではありませんでした。ただ、上記のような経験が無くとも実践していけるように作ってあると思います。尚、IT関連の実務経験はありません。 良かったところ。 Git＆GitHubを学ぶ上で、良い書籍だと感じました。Teamを想定した開発の演習があるのですが、その内容も分かりやすく興味を持って取り組み続けることができました。 command lineで実施するところと、その結果がしっかりと表示してあり、勘違いをしにくい（自分がCommand Lineを打ち込む場面なのか実行結果を待つ場面なのかといった）のも進めやすかったです。
事前説明の項目と演習の項目がしっかりと分けられており、分かりやすかったです。反面、少し上長にも感じました（事前説明の段階で先んじて実行してしまったり等）。「いちばんやさしい」をタイトルにしている以上は仕方ないのかなぁとも思います。 ところどころにある「ワンポイント」で納得感を得ました。編纂事情の説明や、こんなこともできるよといった演習では扱いきれない、視座に富んだ内容が記載されていました。master/slaveがmainに変わりつつある話しとか、面白かったです。下記画像はP140。 公開鍵による認証手続き（今回はSSH）についても、丁寧に解説してあったと思います。こういった書籍を用いずに実践する場合は、躓きポイントになりそうですね。 自分が詰まったところ。 Pull Request先を誤ってfork元にしてしまいました（yasagit-2/ichiyasaGitSample Repository）。同じことをしてしまっている人も多くいるようで、私が訪問した時点で同様のRepositoryには41件（forkは300件超）のPull Requestが行われていました。書籍の読者の皆様、同じ間違いをするようで少し安心しましたｗ
（Pull Requestは取り消すこともできるので、間違った方はそうすると良いかもしれません） ホームディレクトリの環境変数を変更するのに手間取りました。/c/Users/(Home Directory)にはすでにいくつかのFolderやFileが存在したので、そこに新たにFolderを作成し、その直下で作業を進めたいと考えました。しかし、SSH Keyを生成する際に自動的に指定されるのがHome Directoryだったので、その変更を余儀なくされました。結果、Git Bash上でSETXCommandを実行して、変更することができました。下記を参考にしました。操作自体は簡単だったのですが、Git Bashの再起動を実施していなかったので、結果が反映されていないことに気づくのに時間がかかりました。GUIで実施すれば問題なく、かつ早くできたと思いますが、CLIで操作したかったんです。。。
[Git] Git Bashのホームディレクトリを変更する
SETXで環境変数の変更を間違えた場合に面倒なことがあるようですが、最終的にはPowerShellを用いて解決できるようでした。
Windows環境変数の設定に「SETX」コマンドを使ってはいけない理由 Repositoryの連携に手間取りました。上記の件でGit Bashを再起動したせいか、Remote Repository（GitHub）との連携が解消されており、Commitしたところ、下記の通知が流れました。ここでemailだけでも判別できるかなぁ、とか色々やって時間を食いました。 誤植らしきところ。 下記の画像のところです。行数の順番がおかしくなっており（114から始まり途中で90になっている）、記載に誤りがあると思われます。この内容はインプレス社のお詫びと訂正に載っていませんでした（2022年8月7日訪問時）。P215です。
いちやさGit インプレス社 まだ慣れないところ。 git init → git add → git commit git clone → git branch → git add → git commit → git push → Create Pull Request → Review → Merge → git pull git status, git diff, git checkout, git reset, git rm, git log, git remote</description>
    </item>
    
  </channel>
</rss>
